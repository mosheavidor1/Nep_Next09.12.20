import groovy.util.XmlSlurper
import groovy.util.XmlParser
import java.time.LocalDateTime

SOURCES_REPOSITORY = 'https://bitbucket.trustwave.com/scm/nep/nep-qa.git'
DISPLAY_VERSION = "${env.NEP_BRANCH == "next" ? "${BUILD_NUMBER}-${env.NEP_BRANCH}"  :  "${BUILD_NUMBER}"}"

PROPERTIES_FILE_PATH="/var/jenkins_home/workspace/saved-params-${env.NEP_BRANCH}"

node('nep-qa-nightly-25.187') {

	// MODULE_ARTIFACT_SRC="https://nexus01.trustwave.com/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nep-qa&a=nep-qa-automation&e=jar&c=jar-with-dependencies&v=LATEST"
	MODULE_ARTIFACT_SRC = ""
	MODULE_ARTIFACT_DST = "${WORKSPACE}\\nep-qa-automation\\nep-qa-automation.jar"

	try {

		node('master') {
			stage("Read modules versions from  files on Master") {
				def params = readProperties file: "${PROPERTIES_FILE_PATH}"
				NEP_QA_AUTOMATION_VERSION = params['qaautomation_version']
				MODULE_ARTIFACT_SRC = "https://nexus01.trustwave.com/content/repositories/releases/com/trustwave/nep/nep-qa/nep-qa-automation/${NEP_QA_AUTOMATION_VERSION}/nep-qa-automation-${NEP_QA_AUTOMATION_VERSION}-jar-with-dependencies.jar"

				echo "PROPERTIES_FILE_PATH = ${PROPERTIES_FILE_PATH}"
				echo "NEP_QA_AUTOMATION_VERSION = ${NEP_QA_AUTOMATION_VERSION}"

				env.currentTime = LocalDateTime.now()
			}
		}

/*
		stage('Update BUILD_NUMBER') {
			currentBuild.displayName = DISPLAY_VERSION
		}
*/
		stage ('Clean Workspace') {
			deleteDir()
		}

		stage('Get sources from BitBucket') {
			git branch: "${env.NEP_BRANCH}", credentialsId: 'svc_wafbuild', url: "${SOURCES_REPOSITORY}"
		}

		stage('Pre-requisites') {
			powershell """
				Get-ChildItem env:

				echo "From: ${MODULE_ARTIFACT_SRC}"
				echo "To: 	${MODULE_ARTIFACT_DST}"

				##### Download artifact from Nexus
				echo "curl -o ${MODULE_ARTIFACT_DST} ${MODULE_ARTIFACT_SRC}"
				curl -o "${MODULE_ARTIFACT_DST}" "$MODULE_ARTIFACT_SRC"

				if ( -Not (Test-Path "${MODULE_ARTIFACT_DST}")) {
					Write-host "${MODULE_ARTIFACT_DST} file can't be downloaded"
					exit 1
				}
			"""
		}

		stage('Run Tests and Backup results') {
            if (WAIT_FOR_EVENTS.isEmpty()) {
                JAVA_JAR_CMD = """
	            java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}"  "${ENVIRONMENT_NAME}" "win]10.85.25.187]solo-user]breach12345" "lnx]10.85.26.231]root]trustwave"
                """.trim()
			}
			else {
                JAVA_JAR_CMD = """
                java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}"  "${ENVIRONMENT_NAME}" "WaitForEvents120" "win]10.85.25.187]solo-user]breach12345" "lnx]10.85.26.231]root]trustwave"
                """.trim()
			}
            echo "$JAVA_JAR_CMD"

			bat """
                ${JAVA_JAR_CMD}
				if ERRORLEVEL 1  set test_result=false

				xcopy ${WORKSPACE}\\test-output\\* C:\\jenkins\\builds\\${DISPLAY_VERSION}\\  /O /X /E /H /K /Y
				mkdir ${WORKSPACE}\\test-output\\tmp\\pics
				xcopy ${WORKSPACE}\\test-output\\capture\\*.png ${WORKSPACE}\\test-output\\tmp\\pics\\  /O /X /E /H /K /Y

				if "%test_result%" == "false" EXIT 1
			"""
		}

		stage('Send Email') {
			sendEmail("Success")
        }
	}
	catch (err) {
		currentBuild.result = "FAILURE"
			sendEmail("Failed")
        throw err
    }
}

@NonCPS
def getChangeString() {
	MAX_MSG_LEN = 100
	def changeString = ""

	echo "Gathering SCM changes"
	def changeLogSets = currentBuild.changeSets
	for (int i = 0; i < changeLogSets.size(); i++) {
		def entries = changeLogSets[i].items
		for (int j = 0; j < entries.length; j++) {
			def entry = entries[j]
			truncated_msg = entry.msg.take(MAX_MSG_LEN)
			changeString += " - ${truncated_msg} [${entry.author}]\n"
		}
	}

	if (!changeString) {
		changeString = " - No new changes"
	}
	return changeString
}

def sendEmail(status) {
	emailext attachmentsPattern: "test-output/emailable-report.html, test-output/tmp/**/*.png",
		body: '${SCRIPT, template="groovy-html.template"}, ${FILE,path="test-output/emailable-report.html"}',
		subject: "${env.JOB_NAME} (env:${ENVIRONMENT_NAME})- TEST # ${DISPLAY_VERSION} - " + status,
		mimeType: 'text/html',
		from: 'svc_wafbuild@trustwave.com',
		to: "${EMAIL_LIST}"
}
