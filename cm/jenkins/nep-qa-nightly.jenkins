import groovy.util.XmlSlurper
import groovy.util.XmlParser

SOURCES_REPOSITORY = 'https://bitbucket.trustwave.com/scm/nep/nep-qa.git'
DISPLAY_VERSION = "${env.NEP_BRANCH == "next" ? "${BUILD_NUMBER}-${env.NEP_BRANCH}"  :  "${BUILD_NUMBER}"}"
	
node('nep-qa-nightly-25.187') {

	MODULE_SRC_WND="${WORKSPACE}\\nep-qa-automation"
	MODULE_ARTIFACT_SRC="https://nexus01.trustwave.com/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nep-qa&a=nep-qa-automation&e=jar&c=jar-with-dependencies&v=LATEST"
	MODULE_ARTIFACT_DST="${WORKSPACE}\\nep-qa-automation.jar"

	try {

/*
		stage('Update BUILD_NUMBER') {
			currentBuild.displayName = DISPLAY_VERSION
		}
*/		
		stage ('Clean Workspace') {
			deleteDir()
		}
	
		stage('Get sources from BitBucket') {			
			git branch: "${env.NEP_BRANCH}", credentialsId: 'svc_wafbuild', url: "${SOURCES_REPOSITORY}"
		}

		stage('Pre-requisites') {
			powershell """
				Get-ChildItem env:
				
				echo "From: ${MODULE_ARTIFACT_SRC}"
				echo "To: 	${MODULE_ARTIFACT_DST}" 
	
				##### Download artifact from Nexus
				echo "curl -o ${MODULE_ARTIFACT_DST} ${MODULE_ARTIFACT_SRC}"
				curl -o "${MODULE_ARTIFACT_DST}" "$MODULE_ARTIFACT_SRC"
				
				if ( -Not (Test-Path "${MODULE_ARTIFACT_DST}")) {
					Write-host "${MODULE_ARTIFACT_DST} file can't be downloaded"
					exit 1
				}
			"""
		}
		
		stage('Run Tests') {
			bat """
				java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}"  "${ENVIRONMENT_NAME}"
			"""
		}
		
		stage('Send Email and Backup results') {
			sendEmail("Success")
			
			bat("xcopy ${MODULE_SRC_WND}\\test-output\\* C:\\jenkins\\builds\\${DISPLAY_VERSION}\\  /O /X /E /H /K")
		}
	}
	catch (err) {
		currentBuild.result = "FAILURE"
			sendEmail("Failed")
        throw err
    }
}

@NonCPS
def getChangeString() {
	MAX_MSG_LEN = 100
	def changeString = ""

	echo "Gathering SCM changes"
	def changeLogSets = currentBuild.changeSets
	for (int i = 0; i < changeLogSets.size(); i++) {
		def entries = changeLogSets[i].items
		for (int j = 0; j < entries.length; j++) {
			def entry = entries[j]
			truncated_msg = entry.msg.take(MAX_MSG_LEN)
			changeString += " - ${truncated_msg} [${entry.author}]\n"
		}
	}

	if (!changeString) {
		changeString = " - No new changes"
	}
	return changeString
}

def sendEmail(status) {
	emailext attachmentsPattern: 'test-output/emailable-report.html', 
		body: '${SCRIPT, template="groovy-html.template"}',
		subject: "${env.JOB_NAME} - Build # ${DISPLAY_VERSION} - " + status,
		mimeType: 'text/html',
		to: "${NEPA_QA_GROUP}"
}

