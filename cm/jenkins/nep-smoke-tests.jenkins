#!/usr/bin/env groovy

PROPERTIES_FILE_PATH="/var/jenkins_home/workspace/saved-params-${env.NEP_BRANCH}"

node('nep-build-centos7') {
    try {
        LOCK_NAME = (NEP_BRANCH == 'master') ? 'master_smoke_lock' : 'next_smoke_lock'

        echo "buildCauses:  ${currentBuild.buildCauses}"
        isStartedByNEPSET = "${currentBuild.buildCauses}".contains('nepset-multijob')
        TYPE_RUN_LABEL = isRegressionRun() ? "REGR" : "SMOK"
        currentBuild.displayName = "${BUILD_NUMBER}" + "-${TYPE_RUN_LABEL}-${env.NEP_BRANCH}"

        echo "groovy version : ${GroovySystem.version}"

        lock (LOCK_NAME) {

            MODULE_ARTIFACT_SRC = ""
            node('master') {
                stage("Read modules versions from files on Master") {
                    def params = readProperties file: "${PROPERTIES_FILE_PATH}"
                    NEP_QA_AUTOMATION_VERSION = params['qaautomation_version']

                    if(DS_VERSION.isEmpty()) {
                        DS_VERSION = params['dserver_version']
                        DS_DATE = params['dserver_date']
                    }
                    else {
                        DS_DATE = "no data"
                    }

                    if(DS_MGMT_VERSION.isEmpty()) {
                        DS_MGMT_VERSION = params['dservermgmt_version']
                        DS_MGMT_DATE = params['dservermgmt_date']
                    }
                    else {
                        DS_MGMT_DATE = "no data"
                    }

                    if(IS_VERSION.isEmpty()) {
                        IS_VERSION = params['is_version']
                        IS_DATE = params['is_date']
                    }
                    else {
                        IS_DATE = "no data"
                    }
                    // WinEP
                    // bootstrapper_version=1.3.0.1572
                    // bootstrapper_date=2020-11-01T15:26:01.455
                    // LinEP
                    // twendpointlnx_version=1.3.0.823
                    // twendpointlnx_date=2020-11-01T15:25:20.927


                    // nexus proxy - 10.85.26.45
                    MODULE_ARTIFACT_SRC = "http://10.85.26.45/content/repositories/releases/com/trustwave/nep/nep-qa/nep-qa-automation/${NEP_QA_AUTOMATION_VERSION}/nep-qa-automation-${NEP_QA_AUTOMATION_VERSION}-jar-with-dependencies.jar"

                    echo """
                    PROPERTIES_FILE_PATH = ${PROPERTIES_FILE_PATH}
                    NEP_QA_AUTOMATION_VERSION = ${NEP_QA_AUTOMATION_VERSION}
                    DS_VERSION = ${DS_VERSION}
                    DS_DATE = ${DS_DATE}
                    DS_MGMT_VERSION = ${DS_MGMT_VERSION}
                    DS_MGMT_VERSION = ${DS_MGMT_DATE}
                    IS_VERSION = = ${IS_VERSION}
                    IS_VERSION = = ${IS_DATE}

                    """
                }
            }

            stage("Get modules versions") {

                if (SETTINGS_XML.isEmpty()) {
                   SETTINGS_XML = "SmokeTest.xml"
                }

                print_params()

                RES = [:]
                RES.INSTALL   = 'Not run'
                RES.LNE_TESTS = 'Not run'
                RES.WIN_TESTS = 'Not run'

                // this groovy code prohibited by default in Pipelines
                // tempstr = RES.inspect() Scripts not permitted to use staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods inspect java.lang.Object. Administrators can decide whether to approve or reject this signature.
                // echo "tempstr = ${tempstr}

                HOST_IP  = (NEP_BRANCH == 'master') ? '10.85.25.60' : '10.85.25.47'
                // WIN_NODE = (NEP_BRANCH == 'master') ? 'WinSmoke_10_85_24_247' :  'WinSmoke_10_85_25_159' //  'WinSmoke_10_85_24_250'
                WIN_NODE = (NEP_BRANCH == 'master') ? 'WinSmoke_10_85_24_85' :  'WinSmoke_10_85_25_159' //  'WinSmoke_10_85_24_250'
                //WIN_IP = (NEP_BRANCH == 'master') ? '10.85.24.247' :  '10.85.25.159' // '10.85.24.250'
                WIN_IP = (NEP_BRANCH == 'master') ? '10.85.24.85' :  '10.85.25.159' // '10.85.24.250'
                ESX_IP   = (NEP_BRANCH == 'master') ? '10.85.26.75' : '10.85.26.75' // yes, the same now
                VM_NAME  = (NEP_BRANCH == 'master') ? 'NEP-DEV-19' : 'NEP-DEV-20'
                LIN_AGENT_IP = (NEP_BRANCH == 'master') ? '10.85.24.204' : '10.85.24.202'
                LIN_CENTOS8_AGENT_IP = '10.85.24.39'
                S3_BUCKET_ID = VM_NAME.toLowerCase()

                //nepa-is-1.3.0.988.war
                //MODULE_ARTIFACT_SRC = "http://${NEXUS_PROXY}/content/repositories/releases/com/trustwave/nep/nep-qa/nep-qa-automation/${NEP_QA_AUTOMATION_VERSION}/nep-qa-automation-${NEP_QA_AUTOMATION_VERSION}-jar-with-dependencies.jar"
                //               https://nexus01.trustwave.com/content/repositories/releases/com/trustwave/nep/services/nepa-is/${IS_VERSION}/nepa-is-${IS_VERSION}.war
                NEXUS_PROXY = "10.85.26.45"
                IS_WAR_POM = "http://${NEXUS_PROXY}/content/repositories/releases/com/trustwave/nep/services/nepa-is/${IS_VERSION}/pom.xml"
                IS_WAR_POM_FILE = "nepa_is.xml"
                sh """
                    curl -v -L --retry 3 --retry-delay 10 -o "$IS_WAR_POM_FILE"  "${IS_WAR_POM}"
                """

                WIN_EP_VER = sh (
                    script: "grep -oP '(?<=<nepa-bootstrapper-version>).*?(?=</nepa-bootstrapper-version>)' ${IS_WAR_POM_FILE}",
                    returnStdout : true).trim()

                LIN_EP_VER = sh (
                    script: "grep -oP '(?<=<tw-endpoint-lnx-version>).*?(?=</tw-endpoint-lnx-version>)' ${IS_WAR_POM_FILE}",
                    returnStdout : true).trim()


                SOURCES_REPOSITORY = 'https://bitbucket.trustwave.com/scm/nep/nep-qa.git'
                deleteDir()
                git branch: "${NEP_BRANCH}", credentialsId: 'svc_wafbuild', url: "${SOURCES_REPOSITORY}"

                remote_LNE = [:]
                    remote_LNE.name = 'test'
                    remote_LNE.host = "${HOST_IP}"
                    remote_LNE.user = "root"
                    remote_LNE.password = "trustwave"
                    remote_LNE.allowAnyHosts = true

                 echo """
                 ============ Test info ============
                 Version       :   ${NEP_BRANCH}
                 LNE IP        :   ${HOST_IP}
                 ESX_LNE_IP    :   ${ESX_IP}
                 VM_LNE_NAME   :   ${VM_NAME}
                 Win EP IP     :   ${WIN_IP}
                 Lin EP IP     :   ${LIN_AGENT_IP}
                 LIN_CENTOS8_AGENT_IP:  ${LIN_CENTOS8_AGENT_IP}
                 ====================================
                 """
            }

            stage("LNE setup") {
                try {
                    switch (LNE_INSTALL_TYPE) {
                    case "skip" :
                        echo "skip LNE setup part"
                        break
                    case "install" :
                        echo "full LNE reinstall"

                        /*********
                         call LNE install :
                          - if all particular build numbers for IS/DE/DS_MGMT defined
                            call job with that numbers
                          - otherwise do not pass any number - and system will take latest
                            relevant for master/next
                        **********************/
                        if (DS_VERSION.isEmpty() || DS_MGMT_VERSION.isEmpty() || IS_VERSION.isEmpty() ) {
                            echo "install with latest is/ds build numbers"
                            build job: 'tools-tst-bin-deploy-local-env',
                                  parameters:  [
                                      string(name: 'NEP_BRANCH', value: "${NEP_BRANCH}"),
                                      string(name: 'HOST_IP', value: "${HOST_IP}" ),
                                      booleanParam(name: 'RESTORE_SNAPSHOT', value: true ),
                                      string(name: 'ESX_IP', value: "${ESX_IP}"),
                                      string(name: 'VM_NAME', value: "${VM_NAME}")
                                  ]
                        }
                        else {
                            echo "install with explicitly defined is/ds numbers"
                            build job: 'tools-tst-bin-deploy-local-env',
                                  parameters:  [
                                      string(name: 'NEP_BRANCH', value: "${NEP_BRANCH}"),
                                      string(name: 'HOST_IP', value: "${HOST_IP}" ),
                                      booleanParam(name: 'RESTORE_SNAPSHOT', value: true ),
                                      string(name: 'ESX_IP', value: "${ESX_IP}"),
                                      string(name: 'VM_NAME', value: "${VM_NAME}"),
                                      string(name: 'DS_VERSION', value: "${DS_VERSION}"),
                                      string(name: 'DS_MGMT_VERSION', value: "${DS_MGMT_VERSION}"),
                                      string(name: 'IS_VERSION', value: "${IS_VERSION}")
                                  ]
                        }
                        RES.INSTALL = 'OK'
                        break

                    case "upgrade" :
                            echo "upgrade LNE"

                            if (DS_VERSION.isEmpty() || DS_MGMT_VERSION.isEmpty() || IS_VERSION.isEmpty() ) {
                                build job: 'tools-tst-bin-update-services',
                                       parameters: [
                                           //string(name: 'IS_VERSION', value: ''),
                                           //string(name: 'DS_VERSION', value: ''),
                                           //string(name: 'DS_MGMT_VERSION', value: ''),
                                           //string(name: 'NEPA_CENTCOM_CLIENT_VERSION', value: ''),
                                           //string(name: 'DUMMY_PORTAL_SERVICES_VERSION', value: ''),
                                           string(name: 'SERVICE', value: 'is,ds,ds-mgmt,dummy-portal-services,nepa-centcom-client'),
                                           string(name: 'NEP_BRANCH', value: "${NEP_BRANCH}"),
                                           string(name: 'HOST_IP', value: "${HOST_IP}" ),
                                           //string(name: 'USERNAME', value: ''),
                                           //password(name: 'PASSWORD', description: '', value: '')
                                           ]
                            }
                            else {
                                build job: 'tools-tst-bin-update-services',
                                       parameters: [
                                           string(name: 'DS_VERSION', value: "${DS_VERSION}"),
                                           string(name: 'DS_MGMT_VERSION', value: "${DS_MGMT_VERSION}"),
                                           string(name: 'IS_VERSION', value: "${IS_VERSION}"),
                                           //string(name: 'NEPA_CENTCOM_CLIENT_VERSION', value: ''),
                                           //string(name: 'DUMMY_PORTAL_SERVICES_VERSION', value: ''),
                                           string(name: 'SERVICE', value: 'is,ds,ds-mgmt,dummy-portal-services,nepa-centcom-client'),
                                           string(name: 'NEP_BRANCH', value: "${NEP_BRANCH}"),
                                           string(name: 'HOST_IP', value: "${HOST_IP}" ),
                                           //string(name: 'USERNAME', value: ''),
                                           //password(name: 'PASSWORD', description: '', value: '')
                                           ]

                            }
                            RES.INSTALL = 'OK'
                            break;
                    }
                }
                catch (err) {
                    RES.INSTALL = 'NOT OK'
                    throw err
                }
            } // stage

            stage('Run LNE side tests') {
                try {

                    if ( SKIP_TESTS_LNE.contains('true')) {
                       echo "DEBUG: skip stage Run LNE side tests"
                       return
                    }

                    output = sshScript remote: remote_LNE, script: 'nep-qa-scripts/sanity/test_java_apps.sh'
                    echo "after TEST_JAVA_APPS: ${output}"
                    if ( output.contains(' OK')) {
                        echo "test java apps after install OK"
                    }
                    else {
                        writeFile(file: 'check_ports.log', text: output)
                        echo "test java apps after install OK"
                        currentBuild.result = "FAILURE"
                        throw new Exception("ERROR: LNE sanity FAILED")
                    }

                    /* temporary switched off till issue with installer resolved
                    timeout(time: 5, unit: 'MINUTES') {
                        output = sshScript remote: remote_LNE, script: 'nep-qa-scripts/sanity/nep_sanity.sh'
                    }

                    if ( output.contains('nep_sanity_has_passed')) {
                        echo "LNE sanity OK"
                    }
                    else {
                        writeFile(file: 'nep_sanity.log', text: output)
                        echo "ERROR: LNE sanity FAILED"
                        currentBuild.result = "FAILURE"
                        throw new Exception("ERROR: LNE sanity FAILED")
                    }
                    */

                    RES.LNE_TESTS = 'OK'
                }
                catch (err) {
                    RES.LNE_TESTS = 'NOT OK'
                    throw err
                }

            } // stage
            stage('Create S3 Bucket') {
                if ( SKIP_TESTS_WIN.contains('true') ) {
                    echo "DEBUG: skip stage Windows side tests"
                    return
                }

                echo "S3 Bucket"
                build job: 'tools-tst-bin-s3tools',
                                  parameters:  [
                                  string(name: 'BUCKET_ID', value: "${S3_BUCKET_ID}"),
	                              string(name: 'BUCKET_REGION', value: 'Europe (Ireland)'),
                                  string(name: 'NEP_BRANCH', value: "${NEP_BRANCH}"),
                                  string(name: 'HOST_IP', value: "${HOST_IP}" ),
                                  string(name: 'S3_OPERATIONS', value: 'create_bucket'),
                                  string(name: 'NEP_PLATFORM', value: 'wnd')
                                  //---- omit default parameters ------------------
                                  // string(name: 'AWS_ACCESS_KEY_ID', value: "${XXX}"),
                                  // string(name: 'AWS_SECRET_ACCESS_KEY', value: "${XXX}"),
                                  // string(name: 'USERNAME', value: "${XXX}"),
                                  // string(name: 'PASSWORD', value: "${XXX}"),
                                  // string(name: 'NEP_UPDATE_VERSION', value: "${XXX}")
                                  // --------------------------------------------------
                                  ]
            }
            stage('Run EndPoint tests') {
                WIN_SMOKE_TMOUT_MINS  = (SETTINGS_XML.contains('NepNightly.xml')) ? 120 : 60
                timeout(time: WIN_SMOKE_TMOUT_MINS, unit: 'MINUTES') {

                    node( WIN_NODE ) {
                        try {
                            if ( SKIP_TESTS_WIN.contains('true') ) {
                                echo "DEBUG: skip stage Windows side tests"
                                return
                            }

                            SOURCES_REPOSITORY = 'https://bitbucket.trustwave.com/scm/nep/nep-qa.git'
                            DISPLAY_VERSION = "${BUILD_NUMBER}-${NEP_BRANCH}"
                            MODULE_ARTIFACT_DST="${WORKSPACE}\\nep-qa-automation\\nep-qa-automation.jar"
                            echo "RUN Windows QA TESTS  ${MODULE_ARTIFACT_DST}"
                            echo "1. checkout qa-tests automation folder"
                            deleteDir()
                            git branch: "${NEP_BRANCH}", credentialsId: 'svc_wafbuild', url: "${SOURCES_REPOSITORY}"

                            echo "2. download latest nep-qa-automation.jar from nexus"
                            powershell """
                            # Get-ChildItem env:

                            echo "From: ${MODULE_ARTIFACT_SRC}"
                            echo "To: 	${MODULE_ARTIFACT_DST}"

                            ##### Download artifact from Nexus
                            echo "curl -o ${MODULE_ARTIFACT_DST} ${MODULE_ARTIFACT_SRC}"
                            curl -o "${MODULE_ARTIFACT_DST}" "$MODULE_ARTIFACT_SRC"

                            if ( -Not (Test-Path "${MODULE_ARTIFACT_DST}")) {
                                Write-host "${MODULE_ARTIFACT_DST} file can't be downloaded"
                                exit 1
                            }
                            """
                            // SETTINGS_XML = "SmokeTest.xml"
                            // SmokeTest.xml 10.85.25.76
                            // java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}" "${HOST_IP}" "win]${WIN_IP}]QA-NEP]finjan!"
                            bat """
                            java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}" "${HOST_IP}" "win]${WIN_IP}]QA-NEP]finjan!" "lnx]${LIN_AGENT_IP}]root]trustwave" "lnx]${LIN_CENTOS8_AGENT_IP}]root]trustwave"
                            """


                            // bat """
                            // java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}" "${HOST_IP}" "lnx]${LIN_AGENT_IP}]root]trustwave"
                            // """
                            // bat """
                            // java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}" "${HOST_IP}" "win]${WIN_IP}]QA-NEP]finjan!"
                            // """
                            RES.WIN_TESTS = 'OK'
                            echo "BEFORE STASH"
                            stash allowEmpty: true, includes: 'test-output/', name: 'win_stash'
                            echo "AFTER STASH"
                        }
                        catch (exc) {
                            RES.WIN_TESTS = 'NOT_OK'
                            stash allowEmpty: true, includes: 'test-output/', name: 'win_stash'
                            throw exc
                        }
                        finally {
                            if ( !SKIP_TESTS_WIN.contains('true') ) {
                                archiveArtifacts allowEmptyArchive: true, artifacts: 'test-output/*' /* */
                            }
                        }
                    } // win node try
                }// timeout to wait for Win node
            } // stage
        } // lock
    } //global try
    catch (exc) {
        currentBuild.result = "FAILURE"
        // sendEmail("Failed")

        echo "general Pipeline failure."
        throw exc
    }
    finally {
        fileOperations([folderCreateOperation('lne_logs')])

        /* cut logs that are attached only to 1000 last lines
        sshGet remote: remote_LNE,
               from: '/work/services/stub-srv/var/log/nep/nep_centcom_client.log',
               into: 'lne_logs',
               override: true

        sshGet remote: remote_LNE,
               from: '/work/services/nepa-services/ds/var/log/nepa-dserver/nepa-dserver.log',
               into: 'lne_logs',
               override: true

        */

        getLastLogs (remote_LNE,
                     '/work/services/stub-srv/var/log/nep/nep_centcom_client.log',
                     '1000',
                      'lne_logs/tail_1K_nep_centcom_client.log'
                      )

        getLastLogs (remote_LNE,
                     '/work/services/nepa-services/ds/var/log/nepa-dserver/nepa-dserver.log',
                     '1000',
                      'lne_logs/tail_1K_nepa-dserver.log'
                      )

        archiveArtifacts allowEmptyArchive: true, artifacts: 'lne_logs/*'  /* */

        echo "finally prepare mail to send"

        if (currentBuild.result == null) {
            currentBuild.result  = 'SUCCESS'
        }

        if (currentBuild.result == 'SUCCESS') {
           node('master') {
                F="/var/jenkins_home/workspace/smoke-params-${env.NEP_BRANCH}"
            	sh """
            	    touch $F
                    echo "dserver_version=${DS_VERSION}" > $F
                    echo "dserver_date=${DS_DATE}" >> $F
		            echo "dservermgmt_version=${DS_MGMT_VERSION}" >> $F
                    echo "dservermgmt_date=${DS_MGMT_DATE}" >> $F
                    echo "is_version=${IS_VERSION}" >> $F
                    echo "is_date=${IS_DATE}" >> $F
		            echo "bootstrapper_version=${WIN_EP_VER}" >> $F
                    echo "bootstrapper_date=no data" >> $F
		            echo "twendpointlnx_version=${WIN_EP_VER}" >> $F
                    echo "twendpointlnx_date=no data" >> $F
                    cat $F
            	"""

           // fileOperations (
           //   [fileCopyOperation (excludes: '',
           //                       flattenFiles: true,
           //                       includes: "$F",
           //                       renameFiles: false,
           //                       sourceCaptureExpression: '',
           //                       targetLocation: "/var/jenkins_home/workspace/smoke-params-${env.NEP_BRANCH}",
           //                       targetNameExpression: '')
           //                       ]
           //                       )
           }
        }

        if (isStartedByNEPSET && currentBuild.result == 'SUCCESS') {
            echo "do not sent email if called by upstream nepset multijob and result is SUCCESS"
        }
        else {
            sendEmailExt()
        }
    
        if (currentBuild.result == 'FAILURE') {
           error "Pipeline failed, please read logs..."
        }
    }
}


def getLastLogs( remoteObj, logToGet, lastNLines, destName)
{

    sshCommand remote: remoteObj,
               command: "tail -n ${lastNLines} ${logToGet}  > /tmp/temp.log"

    sshGet remote: remoteObj,
           from: '/tmp/temp.log',
           into: destName,
           override: true

}

def isRegressionRun() {
    return SETTINGS_XML.contains('NepNightly.xml')
}

def sendEmailExt()
{
    try {
        unstash 'win_stash'
    }
    catch (exc) {
        echo "no stash win_stash"
    }

    echo "===== currentBuild.result: ${currentBuild.result} "

    prepareMailBody()

    if (SETTINGS_XML.contains('SmokeTest.xml')) {
        EMAIL_SUBJ = "Smoke test results for ${NEP_BRANCH} :${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} "
    }
    else if ((SETTINGS_XML.contains('NepNightly.xml'))) {
        EMAIL_SUBJ = "NEP regression test results for ${NEP_BRANCH} :${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} "
    }
    else {
        EMAIL_SUBJ = "wrong settings.xml param"
    }

    emailext (
       attachLog: true,
       attachmentsPattern: "**/emailable-report.html, nep_sanity.log, check_ports.log, lne_logs/*",
       // body: '${FILE,path="mail_body.html"} ${SCRIPT, template="groovy-html.template"}',
       body: '${FILE,path="mail_body.html"}',
       from: 'ivalevich@trustwave.com',
       to: "${SMOKE_EMAIL_LIST}",
       mimeType: 'text/html',
       subject: "${EMAIL_SUBJ}"
    )
}

def prepareMailBody() {

    def errorColor = '#E74C3C'
    def normalColor = '#27AE60'
    def titleBgColor = (currentBuild.result=='FAILURE' ? errorColor : normalColor)
    def tdTitleMain =  (SETTINGS_XML.contains('NepNightly.xml'))
        ? "NEP Regression test results for ${NEP_BRANCH}"
        : "NEP Smoke test results for ${NEP_BRANCH}"

    echo "currentBuild.result: ${currentBuild.result}  titleBgColor : ${titleBgColor}"

    writeFile(file: 'mail_body.html', text:  """
<html>
    <header><title> HTML HEADER title</title></heade>
        <body>
           <style>
               BODY, TABLE, TD, TH, P {
                   font-family: Calibri, Verdana, Helvetica, sans serif;
                   font-size: 12px;
                   color: black;
               }
               .console {
                   font-family: Courier New;
               }
               .filesChanged {
                   width: 10%;
                   padding-left: 10px;
               }
               .section {
                   width: 100%;
                   border: thin black dotted;
               }
               .td-title-main {
                   color: white;
                   font-size: 200%;
                   padding-left: 5px;
                   font-weight: bold;
               }
               .td-title {
                   color: white;
                   font-size: 120%;
                   font-weight: bold;
                   padding-left: 5px;
                   text-transform: uppercase;
               }
               .td-title-tests {
                   font-weight: bold;
                   font-size: 120%;
               }
               .td-header-maven-module {
                   font-weight: bold;
                   font-size: 120%;   =20
               }

               .td-maven-artifact {
                   padding-left: 5px;
               }

              .tr-title {
                  background-color: ${titleBgColor}
               }

               .test {
                   padding-left: 20px;
               }

               .test-fixed {
                   color: #27AE60;
               }

               .test-failed {
                   color: #E74C3C;
               }
        </style>

         <table class="section">
            <tbody>
                <tr class="tr-title">
                    <td class="td-title-main" colspan="2">
                       ${tdTitleMain}
                    </td>
                </tr>
                <tr>
                    <td>Environment :</td>
                    <td><b>LNE</b></td>
                </tr>
                <tr>
                    <td>Setup LNE:</td>
                    <td><b>${RES.INSTALL}</b></td>
                </tr>
                <tr>
                    <td>LNE Sanity :</td>
                    <td><b>${RES.LNE_TESTS}</b></td>
                </tr>
                <tr>
                    <td>Agents QA tests :</td>
                    <td><b> ${RES.WIN_TESTS} </b></td>
                </tr>
                <tr>
                    <td colspan="2">
                       More info at: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a> and in attach.
                    </td>
                </tr>

                <tr>
                    <td>LNE IP :</td>
                    <td><b>${HOST_IP}</b></td>
                </tr>
                <tr>
                    <td>Windows EP IP :</td>
                    <td><b>${WIN_IP}</b></td>
                </tr>
                <tr>
                    <td>Linux EP IP :</td>
                    <td><b>${LIN_AGENT_IP}</b></td>
                </tr>
                <tr>
                    <td>Linux CENTOS8 EP IP :</td>
                    <td><b>${LIN_CENTOS8_AGENT_IP}</b></td>
                </tr>
                <tr>
                    <td>ESX_LNE_IP :</td>
                  <td><b>${ESX_IP} </b></td>
                </tr>
                <tr>
                    <td>VM_NAME :</td>
                    <td><b>${VM_NAME}</b></td>
                </tr>
                 </tbody>
        </table>
        <br>
        </body>
        </html>

    """)
}


def getProdVersionFromFile( versionFile ) {
    verString = sh (
    script: """
    ver_tmp=`cat ${versionFile}`
    ver_tmp=\"<\${ver_tmp%%</a>*}\"
    ver_tmp=\"\${ver_tmp##*>}\"
    echo \$ver_tmp
    """,
    returnStdout: true).trim()

    return verString
}

def sendEmail( bodyMsg ) {
	mail (
    to: "ivalevich@trustwave.com",
    subject: "Build $BUILD_NUMBER -($JOB_NAME)",
    //// body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
    body: "Mail: " + bodyMsg + " +n\n Check console output at: $BUILD_URL/console" + "\n")
}

def print_params() {
    echo """
      JOB parameters:
      LNE_INSTALL_TYPE :  ${LNE_INSTALL_TYPE}
      NEP_BRANCH       :  ${NEP_BRANCH}
      SMOKE_EMAIL_LIST :  ${SMOKE_EMAIL_LIST}
      SKIP_TESTS_LNE   :  ${SKIP_TESTS_LNE}
      SKIP_TESTS_WIN   :  ${SKIP_TESTS_WIN}
      DS_VERSION       :  ${DS_VERSION}
      DS_MGMT_VERSION  :  ${DS_MGMT_VERSION}
      IS_VERSION       :  ${IS_VERSION}
      SETTINGS_XML     :  ${SETTINGS_XML}
    """
}
