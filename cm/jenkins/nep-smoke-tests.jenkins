#!/usr/bin/env groovy

node('nep-build-centos7') {
    try {

        HOST_IP  = (NEP_BRANCH == 'master') ? '10.85.25.60' : '10.85.25.47'
        WIN_NODE = (NEP_BRANCH == 'master') ? 'WinSmoke_10_85_24_247' : 'WinSmoke_10_85_24_2488'
        ESX_IP   = (NEP_BRANCH == 'master') ? '10.85.26.75' : '10.85.26.75' // yes, the same now
        VM_NAME  = (NEP_BRANCH == 'master') ? 'NEP-DEV-19' : 'NEP-DEV-20' 

        skip_lne_install = false
        skip_lin_test = false
        skip_win_test = true

        node('master') {
            stage("Get modules versions") {
                IS_VERSION_FILE = "/var/jenkins_home/workspace/cm-last-released-builds/NEP-IS-${NEP_BRANCH}.row"
                DS_VERSION_FILE = "/var/jenkins_home/workspace/cm-last-released-builds/NEP-DS-${NEP_BRANCH}.row"
                DS_MGMT_VERSION_FILE = "/var/jenkins_home/workspace/cm-last-released-builds/NEP-DS-Mgmt-${NEP_BRANCH}.row"

                IS_VERSION = getProdVersionFromFile( IS_VERSION_FILE )
                DS_VERSION = getProdVersionFromFile( DS_VERSION_FILE )
                DS_MGMT_VERSION = getProdVersionFromFile( DS_MGMT_VERSION_FILE )

                echo """
                IS_VERSION      = ${IS_VERSION}
                DS_VERSION      = ${DS_VERSION}
                DS_MGMT_VERSION = ${DS_MGMT_VERSION}
                """
            }
        }

        stage("LNE install part") {
            if ( skip_lne_install ) {
                echo "DEBUG: skip LNE install process"
                return
            }
            echo """
            IS_VERSION      = ${IS_VERSION}
            DS_VERSION      = ${DS_VERSION}
            DS_MGMT_VERSION = ${DS_MGMT_VERSION}
            """
            switch (LNE_INSTALL_TYPE) {
            case "skip" :
                echo "skip LNE installation part"
                break
            case "ext" :
                echo "external LNE installation part"

                build job: 'tools-tst-bin-deploy-local-env',
                      parameters:  [
                          string(name: 'NEP_BRANCH', value: "${NEP_BRANCH}"),
                          string(name: 'HOST_IP', value: "${HOST_IP}" ),
                          booleanParam(name: 'RESTORE_SNAPSHOT', value: true ),
                          string(name: 'ESX_IP', value: "${ESX_IP}"),
                          string(name: 'VM_NAME', value: "${VM_NAME}")
                      ]

                break

            case "int" :
                echo "internal LNE installation part"
                internal_LNE_Install()
                break;
            }
        }

        stage('Run LNE side tests') {
            if ( skip_lin_test ) {
                echo "DEBUG: skip stage Run LNE side tests"
                return
            }

//             writeFile file: 'lne_san.sh', text: '''
// #!/bin/bash

// FCAB=/work/services/stub-srv/var/file_cabinet
// CID=14159
// REQ=`echo '{"customerId":14159,"configuration":{"centcom_meta":{"schema_version":"1.1.1"},"global_conf":{"log_level":"debug","conf_version":3},"agent":{"ds_host":"endpoint-protection-services.local.tw-test.net","ds_port":443,"ds_protocol":"https","check_update_period":62,"report_period":60,"ds_max_off_period":48,"modules":[{"name":"Windows Log Monitor","binary_name":"WLM.dll","enabled":true},{"name":"Log File Monitor","binary_name":"LFM.dll","enabled":true}],"transport":{"transport_type":2,"syslog":{"port":0},"scp":{"host":"siem-ingress.trustwave.com","dest_folder":"/var/siem/data/nep","port":9022,"user":"twsiem","ack":false,"max_send_folder_size":100}}},"wlm":{"max_monitor_queue_size":10000,"queues_collector_idle_time":5,"monitor_items":[{"log_name":"Security","enabled":true,"advanced_filter":false,"filters":[]},{"log_name":"System","enabled":true,"advanced_filter":false,"filters":[]}]},"lfm":{"max_monitor_queue_size":10000,"queues_collector_idle_time":5,"monitor_items":[]}}}' | sed "s/\\\\$CID/$CID/"` ; \\rm -rf $FCAB/$CID/ ; curl -v -H "Content-Type: application/json" http://localhost:9091/nep-centcom-client/initCustomerSettings -d "$REQ" && sleep 120 && curl -s http://localhost:9080/$CID/`find $FCAB/$CID/ -type f -name \\*.exe\\* -printf %f` | head -1 | strings | grep -q DOS\\ mode && curl -s http://localhost:9080/$CID/`find $FCAB/$CID/ -type f -name \\*.lnx_\\* -printf %f` | head -c 4 | grep -q ELF && echo nep_sanity_has_passed
//             '''

//             USERNAME = "${ "${env.USERNAME}" == "" ? "root"  :  "${env.USERNAME}" }"
//             PASSWORD = "${ "${env.PASSWORD}" == "" ? "trustwave"  :  "${env.PASSWORD}" }"

//             def remote = [:]
//             remote.name = 'test'
//             remote.host = "${HOST_IP}"
//             remote.user = "${USERNAME}"
//             remote.password = "${PASSWORD}"
//             remote.allowAnyHosts = true
//             sshPut remote: remote, from: 'lne_san.sh', into: '/tmp'
        }

        stage('Run Win tests') {
            node('WinSmoke_10_85_24_247') {
                try {
                    if ( skip_win_test ) {
                        echo "DEBUG: skip stage Windows side tests"
                        return
                    }

                    SOURCES_REPOSITORY = 'https://bitbucket.trustwave.com/scm/nep/nep-qa.git'
                    DISPLAY_VERSION = "${BUILD_NUMBER}-${NEP_BRANCH}"
                    MODULE_ARTIFACT_SRC="https://nexus01.trustwave.com/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nep-qa&a=nep-qa-automation&e=jar&c=jar-with-dependencies&v=LATEST"
                    MODULE_ARTIFACT_DST="${WORKSPACE}\\nep-qa-automation\\nep-qa-automation.jar"
                    echo "RUN Windows smoke TESTS  ${MODULE_ARTIFACT_DST}"
                    echo "1. checkout qa-tests automation folder"
                    deleteDir()
                    git branch: "${NEP_BRANCH}", credentialsId: 'svc_wafbuild', url: "${SOURCES_REPOSITORY}"

                    echo "2. download latest nep-qa-automation.jar from nexus"
                    powershell """
                    # Get-ChildItem env:

                    echo "From: ${MODULE_ARTIFACT_SRC}"
                    echo "To: 	${MODULE_ARTIFACT_DST}"

                    ##### Download artifact from Nexus
                    echo "curl -o ${MODULE_ARTIFACT_DST} ${MODULE_ARTIFACT_SRC}"
                    curl -o "${MODULE_ARTIFACT_DST}" "$MODULE_ARTIFACT_SRC"

                    if ( -Not (Test-Path "${MODULE_ARTIFACT_DST}")) {
                        Write-host "${MODULE_ARTIFACT_DST} file can't be downloaded"
                        exit 1
                    }
                    """
                    SETTINGS_XML = "LNE/WinInstall.xml"
                    timeout(time: 20, unit: 'MINUTES') {
                            //    retry(2) {
                        bat """
                        java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}" "${HOST_IP}"
                        """
                        //    }
                    }
                    //art_str = '**/*.html'
                    archiveArtifacts artifacts: "**/emailable-report.html" // ${art_str}
                }
                catch (exc) {
	            	currentBuild.result = "FAILURE"
                    throw exc
                }
                finally {
                    // env.ForEmailPlugin = env.WORKSPACE
                    // emailext attachmentsPattern: 'TestResults\\*.trx',
                    emailext (
                      attachLog: true,
                      attachmentsPattern: "**\\emailable-report.html",
                      body: """
                           Windows smoke test for ${NEP_BRANCH}
                           ${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
                           More info at: ${env.BUILD_URL} and in attach.
                      """.trim(),
                      to: 'ivalevich@trustwave.com',
                      subject: "Win smoke test for {NEP_BRANCH}."
                    )
                }
            }
        }
    }
    catch (exc) {
        currentBuild.result = "FAILURE"
        sendEmail("Failed")
        throw exc
    }
    finally {
        // sendEmail("Smoke run OK")
    }
}

def getProdVersionFromFile( versionFile ) {
    verString = sh (
    script: """
    ver_tmp=`cat ${versionFile}`
    ver_tmp=\"<\${ver_tmp%%</a>*}\"
    ver_tmp=\"\${ver_tmp##*>}\"
    echo \$ver_tmp
    """,
    returnStdout: true).trim()

    return verString
}

def sendEmail( bodyMsg ) {
	mail (
		to: "ivalevich@trustwave.com",
		subject: "Build $BUILD_NUMBER -($JOB_NAME)",
		//// body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
        body: "Mail: " + bodyMsg + " +n\n Check console output at: $BUILD_URL/console" + "\n")
}

def internal_LNE_Install() {
    echo "internal_LNE_Install"
    /*
        //RESTORE_SNAPSHOT
        //ESX_IP
        //VM_NAME
        //SNAPSHOT_NAME // NEP Base OS || Centos 7 (minimal) + SELinux disabled

        def ALL_SERVICSES_LIST = [
            'ca',
            'kafka',
            'nginx',
            'redis',
            'siem',
            'ep',
            'stub-srv',
            'haproxy',
            'ds',
            'ds-mgmt',
            'is',
            'mysql'
        ]

        def UP_SERVICES_YAMLS = [
            'ca.yml',
            'redis.yml',
            'siem.yml',
            'ep.yml',
            'kafka.yml',
            'stub-srv.yml',
            'ds.yml',
            'ds-mgmt.yml',
            'is.yml',
            'nginx.yml',
            'mysql'
        ]

        def DOWN_SERVICES_YAMLS = [
            'nginx.yml',
            'is.yml',
            'ds-mgmt.yml',
            'ds.yml',
            'stub-srv.yml',
            'kafka.yml',
            'siem.yml',
            'ep.yml',
            'redis.yml',
            'ca.yml',
            'mysql'
        ]

        USERNAME = "root"
        PASSWORD = "trustwave"

        def remote = [:]
        remote.name = 'smoke_test'
        remote.host = "${HOST_IP}"
        remote.user = "${USERNAME}"
        remote.password = "${PASSWORD}"
        remote.allowAnyHosts = true

        GIT_REPOSITORY_WITH_CREDENTIALS='https://svc_wafbuild:IcUcN0lc@bitbucket.trustwave.com/scm/nep/nep-tools.git'


        WORK_FOLDER='/work'
        LOG_FOLDER="${WORK_FOLDER}/log"
        UPDATES_FOLDER="${WORK_FOLDER}/updates"
        IMAGES_LOCATION_FOLDER="${WORK_FOLDER}/nep-tools/testing-tools/docker/images"
        DOCKER_YMLS_SRC="${WORK_FOLDER}/nep-tools/testing-tools/docker/ymls"
        DOCKER_YMLS_DST="${WORK_FOLDER}/ymls"
        SERVICES_LOCATION_SRC="${WORK_FOLDER}/nep-tools/testing-tools/services"
        SERVICES_LOCATION_DST="${WORK_FOLDER}/services"

        DOCKER_CONFIG='/etc/docker/daemon.json'
        NEXUS_DOCKER_REPO='192.168.120.150:8083'

        DOCKER_TOOLS_SRC="${WORK_FOLDER}/nep-tools/testing-tools/docker/tools"
        DOCKER_TOOLS_DST="${WORK_FOLDER}/tools"
        S3_ARTIFACT_SRC="https://nexus01.trustwave.com/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nepa-tools.internal&a=s3tools&v=LATEST&e=cmd"
        S3_ARTIFACT_DST="${DOCKER_TOOLS_DST}/bin/s3_cmd"
        S3_BLOCKER_SRC="${WORK_FOLDER}/nep-tools/internal-tools/s3tools/s3-blocker"
        NEXUS_URL_PRFX='https://nexus01.trustwave.com/content/repositories/releases/com/trustwave'

        DS_ARTIFACT_NAME='nepa-dserver.jar'
        DS_ARTIFACT_CONTAINER="/var/lib/nepa-dserver/${DS_ARTIFACT_NAME}"
        DS_ARTIFACT_SRC="${NEXUS_URL_PRFX}/nep/services/nepa-dserver/${DS_VERSION}/nepa-dserver-${DS_VERSION}.war"
        DS_ARTIFACT_DST="${SERVICES_LOCATION_SRC}/ds${DS_ARTIFACT_CONTAINER}"

        DS_MGMT_ARTIFACT_NAME='nepa-dserver-mgmt.jar'
        DS_MGMT_ARTIFACT_CONTAINER="/var/lib/nepa-dserver-mgmt/${DS_MGMT_ARTIFACT_NAME}"
        DS_MGMT_ARTIFACT_SRC="${NEXUS_URL_PRFX}/nep/services/nepa-dserver-mgmt/${DS_MGMT_VERSION}/nepa-dserver-mgmt-${DS_MGMT_VERSION}.war"
        DS_MGMT_ARTIFACT_DST="${SERVICES_LOCATION_SRC}/ds-mgmt${DS_MGMT_ARTIFACT_CONTAINER}"

        IS_ARTIFACT_NAME='nepa-is.jar'
        IS_ARTIFACT_CONTAINER="/var/lib/nepa-is/${IS_ARTIFACT_NAME}"
        IS_ARTIFACT_SRC="${NEXUS_URL_PRFX}/nep/services/nepa-is/${IS_VERSION}/nepa-is-${IS_VERSION}.war"
        IS_ARTIFACT_DST="${SERVICES_LOCATION_SRC}/is${IS_ARTIFACT_CONTAINER}"

        DUMMY_PORTAL_SRC="${WORK_FOLDER}/nep-tools/testing-tools/services-src/dummy-portal-services"
        DUMMY_PORTAL_ARTIFACT_SRC="https://nexus01.trustwave.com/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nepa-tools.testing&a=dummy-portal-services&v=LATEST&e=war"
        DUMMY_PORTAL_ARTIFACT_DST="${SERVICES_LOCATION_SRC}/stub-srv/apps/dummy-portal-services.war"

        CENTCOM_SRC="${WORK_FOLDER}/nep-tools/testing-tools/services-src/nepa-centcom-client"
        CENTCOM_ARTIFACT_SRC="https://nexus01.trustwave.com/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nepa-tools.testing&a=nepa-centcom-client&v=LATEST&e=war"
        CENTCOM_ARTIFACT_DST="${SERVICES_LOCATION_SRC}/stub-srv/apps/nepa-centcom-client.war"

        DOCKER_IMAGES_URL_PRFX="${NEXUS_URL_PRFX}/nep/docker/images"
        DOCKER_IMAGES_DST="${WORK_FOLDER}/images"

        sshCommand remote: remote, command: """
                    set -x

					SELINUXSTATUS=\$(getenforce);
					if [ "\${SELINUXSTATUS,,}" != "disabled" ]; then

						sed -i 's/enforcing/disabled/;s/permissive/disabled/' /etc/selinux/config /etc/selinux/config
					    echo "======================================================================================="
					    echo "SELinux has been disabled"
					    echo "Please REBOOT and start deployment job again"
					    echo "======================================================================================="
					    exit 1
					else
					    echo "SELinux disabled. Continue..."
					fi

					### Find out if required packages are installed
					yum -y install epel-release yum-utils

					yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
					yum install -y docker-ce docker-ce-cli containerd.io

					for pkg in {'git','curl','rsync','net-tools','jq'}
					do
						yum -y install \$pkg
					done

					mkdir -p \$(dirname ${DOCKER_CONFIG})
					cat <<_EOB > "${DOCKER_CONFIG}"
{
"insecure-registries" : ["${NEXUS_DOCKER_REPO}"]
}
_EOB
					### Configure Docker to start on boot and start service
					systemctl enable docker
					systemctl restart docker.service

					if [ "\$( docker-compose version 2>/dev/null | head -1 | cut -d, -f1)" != "docker-compose version 1.25.5" ]
					then
						### Install docker-compose
						rm -f /usr/local/bin/docker-compose /usr/bin/docker-compose
						curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
						chmod +x /usr/local/bin/docker-compose
						ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

						if [[ ! -f /usr/bin/docker-compose ]]; then
							echo "Can't install docker-compose utility"
							exit 1
						fi
					fi

					### Install yq
					curl -o /bin/yq -L https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64
					chmod +x /bin/yq

				"""

                sshCommand remote: remote, command: """
					set -x

					> /info.nep.folder
					> /info.nep.hostip
					### Clone GIT repository
					mkdir -p ${WORK_FOLDER} && cd "\$_"
					mkdir -p ${UPDATES_FOLDER}
					mkdir -p ${LOG_FOLDER}
					mkdir -p ${DOCKER_IMAGES_DST}
					mkdir -p ${SERVICES_LOCATION_DST}
					mkdir -p ${DOCKER_YMLS_DST}
					mkdir -p ${DOCKER_TOOLS_DST}

					echo "${WORK_FOLDER}" > /info.nep.folder
					echo \$(hostname -I | awk ' {print \$1}') > /info.nep.hostip

                    rm -rf nep-tools
					git clone -b ${NEP_BRANCH} ${GIT_REPOSITORY_WITH_CREDENTIALS}

					### Copy yml files from SRC to DST - for update
					rsync -avzL "${DOCKER_YMLS_SRC}"  "${WORK_FOLDER}"
					### Copy tools from SRC to DST
					rsync -avzL "${DOCKER_TOOLS_SRC}"  "${WORK_FOLDER}"
					### Copy S3 tools from SRC to DST
					cp -f "${S3_BLOCKER_SRC}" "${DOCKER_TOOLS_DST}/bin/"
					### Get latest utility S3TOOLS from Nexus
					curl -L "${S3_ARTIFACT_SRC}" -o "${S3_ARTIFACT_DST}"

					chmod -R +x "${DOCKER_TOOLS_DST}"

					### Update Application-specific startup files
					echo "PATH=\$PATH:${DOCKER_TOOLS_DST}/bin:${DOCKER_TOOLS_DST}/s3" > /etc/profile.d/nep.sh

					### Update Application-specific startup files
				"""

                // sshCommand remote: remote, command: """
				// 	set -x

				// 	### Get required docker images from Nexus
				// 	>${LOG_FOLDER}/info.docker_images

                //      for image_tmp in \$(awk '{print \$0}' ${DOCKER_YMLS_DST}/*.yml | yq r -P - services.*.image | cut -d'/' -f2- | uniq); do
				// 		image=\$(echo \$image_tmp | tr -d '[],')
				// 		echo \$image >> ${LOG_FOLDER}/info.docker_images

				// 		if [ -z "\$(docker images \$image -q)" ]; then
				// 			docker pull ${NEXUS_DOCKER_REPO}/\${image}
				// 		fi
				// 	done
				// """

                build job: 'download-in-loop-and-check-hash',
					parameters: [
						string(name: 'SRC_FILE', value: DS_ARTIFACT_SRC),
						string(name: 'DST_FILE', value: DS_ARTIFACT_DST),
						string(name: 'HASH_UTILITY', value: 'sha1'),
						string(name: 'LOOP_TIMES', value: '3'),
						string(name: 'HOST_IP', value: "${HOST_IP}"),
						string(name: 'USERNAME', value: "${USERNAME}"),
						password(description: '', name: 'PASSWORD', value: "${PASSWORD}")
					]

				build job: 'download-in-loop-and-check-hash',
					parameters: [
						string(name: 'SRC_FILE', value: DS_MGMT_ARTIFACT_SRC),
						string(name: 'DST_FILE', value: DS_MGMT_ARTIFACT_DST),
						string(name: 'HASH_UTILITY', value: 'sha1'),
						string(name: 'LOOP_TIMES', value: '3'),
						string(name: 'HOST_IP', value: "${HOST_IP}"),
						string(name: 'USERNAME', value: "${USERNAME}"),
						password(description: '', name: 'PASSWORD', value: "${PASSWORD}")
					]

				build job: 'download-in-loop-and-check-hash',
					parameters: [
						string(name: 'SRC_FILE', value: IS_ARTIFACT_SRC),
						string(name: 'DST_FILE', value: IS_ARTIFACT_DST),
						string(name: 'HASH_UTILITY', value: 'sha1'),
						string(name: 'LOOP_TIMES', value: '3'),
						string(name: 'HOST_IP', value: "${HOST_IP}"),
						string(name: 'USERNAME', value: "${USERNAME}"),
						password(description: '', name: 'PASSWORD', value: "${PASSWORD}")
					]

				build job: 'download-in-loop-and-check-hash',
					parameters: [
						string(name: 'SRC_FILE', value: DUMMY_PORTAL_ARTIFACT_SRC),
						string(name: 'DST_FILE', value: DUMMY_PORTAL_ARTIFACT_DST),
						string(name: 'HASH_UTILITY', value: 'md5'),
						string(name: 'LOOP_TIMES', value: '3'),
						string(name: 'HOST_IP', value: "${HOST_IP}"),
						string(name: 'USERNAME', value: "${USERNAME}"),
						password(description: '', name: 'PASSWORD', value: "${PASSWORD}")
					]

				build job: 'download-in-loop-and-check-hash',
					parameters: [
						string(name: 'SRC_FILE', value: CENTCOM_ARTIFACT_SRC),
						string(name: 'DST_FILE', value: CENTCOM_ARTIFACT_DST),
						string(name: 'HASH_UTILITY', value: 'md5'),
						string(name: 'LOOP_TIMES', value: '3'),
						string(name: 'HOST_IP', value: "${HOST_IP}"),
						string(name: 'USERNAME', value: "${USERNAME}"),
						password(description: '', name: 'PASSWORD', value: "${PASSWORD}")
					]

                sshCommand remote: remote, command: """
					set -x

					declare -a services
					declare -a volumes

					cd ${SERVICES_LOCATION_SRC}
					>${LOG_FOLDER}/info.containers

					for container_tmp in ${ALL_SERVICSES_LIST}; do
						container=\$(echo \$container_tmp | tr -d '[],')
						container_src_path="${SERVICES_LOCATION_SRC}/\$container"
						echo \$container >>${LOG_FOLDER}/info.containers

						### Get all services from container.yml file
						echo "Get all services from \$container.yml file"
						readarray -t services < <(cat ${DOCKER_YMLS_DST}/\$container.yml | yq r -pp  - 'services.*' | cut -d. -f2 )
						echo \${services[@]} > ${LOG_FOLDER}/info.\$container.services

						for service in \${services[@]}; do
							>${LOG_FOLDER}/info.\$container.\$service
							>${DOCKER_YMLS_DST}/\$service.yml.env

							### Prepare enviroment file for docker compose
							echo "SERVICE_NAME=\$service"  	>> ${DOCKER_YMLS_DST}/\$service.yml.env

							### Definition on default path prefix, if changes required - it will be applied inside case command
							service_path_prefix=${SERVICES_LOCATION_DST}/\$service

							### Download services artifacts and prepare env.variables for containers
							case \$service in
								ds) service_path_prefix=${SERVICES_LOCATION_DST}/nepa-services/ds;
									echo "SERVICE_PATH=${DS_ARTIFACT_CONTAINER}"	>> ${DOCKER_YMLS_DST}/\$service.yml.env
									;;
								ds-mgmt) service_path_prefix=${SERVICES_LOCATION_DST}/nepa-services/ds-mgmt;
									echo "SERVICE_PATH=${DS_MGMT_ARTIFACT_CONTAINER}"	>> ${DOCKER_YMLS_DST}/\$service.yml.env
									;;
								haproxy) service_path_prefix=${SERVICES_LOCATION_DST}/proxy/haproxy;
									;;
								is) service_path_prefix=${SERVICES_LOCATION_DST}/nepa-services/is;
									echo "SERVICE_PATH=${IS_ARTIFACT_CONTAINER}"	>> ${DOCKER_YMLS_DST}/\$service.yml.env
									;;
								nginx) service_path_prefix=${SERVICES_LOCATION_DST}/proxy/nginx;
									;;

								*) echo "Unknown service:  TBD - Michael"
									;;
							esac

							if [ "\$service" == "\$container" ]; then
								echo \$service_path_prefix > ${LOG_FOLDER}/info.\$container.prefix
							fi

							readarray -t volumes < <(cat ${DOCKER_YMLS_DST}/\$container.yml | yq r -P - services.\$service.volumes | awk '{print \$2}')
							index=0
							for volume in \${volumes[@]}; do
								svc_vol_src=\$(echo \$volume | cut -d: -f1)
								svc_vol_dst=\$(echo \$volume | cut -d: -f2)
								svc_vol_suffix=\$(echo \$volume | cut -d: -f3)

								srv_path_src=\$container_src_path\${svc_vol_dst}
								srv_path_dst=\${service_path_prefix}\${svc_vol_dst}

								echo "\$index:\${srv_path_src}:\${srv_path_dst}"	>> ${LOG_FOLDER}/info.\$container.\$service

								### Due to limitation in yq - it's impossible to add double quotes during "yq w" command
								### String "replacedoublequotes" will be added and later will be repalced by double quotes
								tmp_str="replacedoublequotes\$srv_path_dst:\$svc_vol_dst:\$svc_vol_suffix"
								tmp_str+="replacedoublequotes"

								cat ${DOCKER_YMLS_DST}/\$container.yml | yq w - services.\$service.volumes[\$index] \$tmp_str | tee ${DOCKER_YMLS_DST}/\$container-tmp.yml
								sed -i 's/replacedoublequotes/"/g' ${DOCKER_YMLS_DST}/\$container-tmp.yml
								mv -f ${DOCKER_YMLS_DST}/\$container-tmp.yml  ${DOCKER_YMLS_DST}/\$container.yml
								rm -f ${DOCKER_YMLS_DST}/\$container-tmp.yml

								((index++))
							done
						done
					done
				"""

				sshCommand remote: remote, command: """
					set -x

					while IFS= read -r container; do
						>${LOG_FOLDER}/info.\$container.mapping

						while IFS= read -r services; do

							for service in \${services[@]}; do
								echo "Service: \$service" >> ${LOG_FOLDER}/info.\$container.mapping

								while IFS= read -r volume_map; do
									index=\$(echo "\$volume_map" | cut -d: -f1)
									srv_path_src=\$(echo "\$volume_map" | cut -d: -f2)
									srv_path_dst=\$(echo "\$volume_map" | cut -d: -f3)

									if [[ -d \${srv_path_src} ]]; then
										echo "mkdir -p \${srv_path_dst}" >> ${LOG_FOLDER}/info.\$container.mapping
										echo "rsync -avzL \${srv_path_src}   \$(dirname \${srv_path_dst})" >> ${LOG_FOLDER}/info.\$container.mapping

										mkdir -p \${srv_path_dst}
										rsync -avzL \${srv_path_src}   \$(dirname \${srv_path_dst})
									elif [[ -f \${srv_path_src} ]]; then
										echo "mkdir -p \$(dirname \${srv_path_dst})" >> ${LOG_FOLDER}/info.\$container.mapping
										echo "rsync -avzL \$srv_path_src   \${srv_path_dst}" >> ${LOG_FOLDER}/info.\$container.mapping

										mkdir -p \$(dirname \${srv_path_dst})
										rsync -avzL \$srv_path_src   \${srv_path_dst}
									else
										echo \${srv_path_src} is not valid
										exit 1
									fi
								done < "${LOG_FOLDER}/info.\$container.\$service"
							done
						done < "${LOG_FOLDER}/info.\$container.services"
					done < "${LOG_FOLDER}/info.containers"

				"""

                // sshCommand remote: remote, command: """
				// 	set -x

		        // 	PROPERTIES_SRC_DST=("${DUMMY_PORTAL_SRC}/etc/nep-properties/*.properties" \
				// 						"${WORK_FOLDER}/services/stub-srv/etc/nep-properties/" \
		        // 						"${DUMMY_PORTAL_SRC}/src/main/resources/*.properties" \
				// 						"${WORK_FOLDER}/services/stub-srv/etc/dummy-portal-services/" \
		        // 						"${DUMMY_PORTAL_SRC}/etc/*.xml" \
				// 						"${WORK_FOLDER}/services/stub-srv/etc/dummy-portal-services/" \
		        // 						"${DUMMY_PORTAL_SRC}/root/portal/*.properties" \
				// 						"${WORK_FOLDER}/services/stub-srv/root/portal/dummy-portal-services/" \
		        // 						"${CENTCOM_SRC}/root/portal/*.properties" \
				// 						"${WORK_FOLDER}/services/stub-srv/root/portal/nepa-centcom-client/" \
		        // 						"${CENTCOM_SRC}/src/main/resources/*.properties" \
				// 						"${WORK_FOLDER}/services/stub-srv/etc/nepa-centcom-client/" \
		        // 						"${CENTCOM_SRC}/etc/*.xml" \
				// 						"${WORK_FOLDER}/services/stub-srv/etc/nepa-centcom-client/")

				// 	>${LOG_FOLDER}/info.properties.copy
		        //     for index in \${!PROPERTIES_SRC_DST[@]}; do
		        //         if [ \$((10#\$index % 2)) == 0 ]; then

		        //         	src=\${PROPERTIES_SRC_DST[\$index]}
		        //         	dst=\${PROPERTIES_SRC_DST[\$index+1]}

		        //         	mkdir -p \${dst}
		        //         	rsync -avzL  \${src} \${dst}

		        //             echo   "\${src} --> \${dst}" >> ${LOG_FOLDER}/info.properties.copy
		        //         fi
		        //     done
                // """

				sshCommand remote: remote, command: """
					set -x

					LIST="ca/etc/camanager/data kafka/bitnami zookeeper/bitnami ep/opt redis/var/lib/redis siem/var/siem/data/nep siem/scp/var/siem/data/nep siem/nep/siem/scp/var/siem/data/nep siem/syslog/var/log"
					for path in \$LIST
					do
						mkdir -p ${SERVICES_LOCATION_DST}/\$path
						chmod -R 0777 ${SERVICES_LOCATION_DST}/\$path
					done
					LIST="nepa-services/ds/start.sh nepa-services/ds-mgmt/start.sh nepa-services/is/start.sh"
					for path in \$LIST
					do
						chmod +x ${SERVICES_LOCATION_DST}/\$path
					done
				"""

				sshCommand remote: remote, command: """
					set -x

					docker network create nep-tier

					${DOCKER_TOOLS_DST}/bin/nep_base up

					curl http://127.0.0.1:8000/ca/CA_init.sh
					curl http://127.0.0.1:8000/ca/CA_sign.sh?siem
					curl http://127.0.0.1:8000/ca/CA_scp.sh?siem
					curl http://127.0.0.1:8000/ca/CA_sign.sh?endpoint-protection-services.local.tw-test.net
				"""

                sshCommand remote: remote, command: """
					set -x

					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/customer_data/endpoint-protection-services.local.tw-test.net_bundle.pem ${SERVICES_LOCATION_DST}/proxy/haproxy/usr/local/etc/haproxy/certs/endpoint-protection.bundle.pem
					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/customer_data/endpoint-protection-services.local.tw-test.net_bundle.pem ${SERVICES_LOCATION_DST}/proxy/haproxy/usr/local/etc/haproxy/certs/nep.bundle.pem
					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/public/ca-cert.pem ${SERVICES_LOCATION_DST}/proxy/haproxy/usr/local/etc/haproxy/ca/ca.pem

					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/public/ca-cert.pem ${SERVICES_LOCATION_DST}/proxy/nginx/etc/pki/tls/certs/endpoint-protection-services.local.tw-test.net.staple
					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/public/ca-cert.pem ${SERVICES_LOCATION_DST}/proxy/nginx/etc/pki/tls/certs/endpoint-protection-services.local.tw-test.net.client_ca
					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/customer_data/endpoint-protection-services.local.tw-test.net_crt.pem ${SERVICES_LOCATION_DST}/proxy/nginx/etc/pki/tls/certs/endpoint-protection-services.local.tw-test.net.combined
					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/customer_data/endpoint-protection-services.local.tw-test.net_key.pem ${SERVICES_LOCATION_DST}/proxy/nginx/etc/pki/tls/private/endpoint-protection-services.local.tw-test.net.key

					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/public/ca-cert.pem ${SERVICES_LOCATION_DST}/siem/etc/pki/tls/ca.pem
					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/customer_data/siem_crt.pem ${SERVICES_LOCATION_DST}/siem/etc/pki/tls/cert.pem
					ln -f ${SERVICES_LOCATION_DST}/ca/etc/camanager/data/customer_data/siem_key.pem ${SERVICES_LOCATION_DST}/siem/etc/pki/tls/key.pem
				"""

                sshCommand remote: remote, command: """
					set -x

					echo "00 * * * * root ${DOCKER_TOOLS_DST}/bin/s3-blocker ${WORK_FOLDER}/flag-s3-lifetime 12" > /etc/cron.d/s3-blocker.crond
					chmod 0644 /etc/cron.d/s3-blocker.crond
					systemctl reload crond
				"""

                sshCommand remote: remote, command: """
					set -x

					${DOCKER_TOOLS_DST}/bin/nep_service all up

					for usr in ca redis kafka mysql is ds ds-mgmt stub-srv siem nginx ep
					do
					     useradd -G docker -s ${DOCKER_TOOLS_DST}/bin/nep_ssh \$usr
					     echo "\$usr:trustwave" | chpasswd
					done

					cp ${DOCKER_TOOLS_DST}/bin/nep_boot.service /etc/systemd/system/nep_boot.service
					systemctl enable nep_boot.service

				"""
*/
}
