#!/usr/bin/env groovy

node('nep-build-centos7') {
    try {

        print_params()

        HOST_IP  = (NEP_BRANCH == 'master') ? '10.85.25.60' : '10.85.25.47'
        WIN_NODE = (NEP_BRANCH == 'master') ? 'WinSmoke_10_85_24_247' : 'WinSmoke_10_85_24_250'
        ESX_IP   = (NEP_BRANCH == 'master') ? '10.85.26.75' : '10.85.26.75' // yes, the same now
        VM_NAME  = (NEP_BRANCH == 'master') ? 'NEP-DEV-19' : 'NEP-DEV-20'

        node('master') {
            stage("Get modules versions") {
                IS_VERSION_FILE = "/var/jenkins_home/workspace/cm-last-released-builds/NEP-IS-${NEP_BRANCH}.row"
                DS_VERSION_FILE = "/var/jenkins_home/workspace/cm-last-released-builds/NEP-DS-${NEP_BRANCH}.row"
                DS_MGMT_VERSION_FILE = "/var/jenkins_home/workspace/cm-last-released-builds/NEP-DS-Mgmt-${NEP_BRANCH}.row"

                IS_VERSION = getProdVersionFromFile( IS_VERSION_FILE )
                DS_VERSION = getProdVersionFromFile( DS_VERSION_FILE )
                DS_MGMT_VERSION = getProdVersionFromFile( DS_MGMT_VERSION_FILE )

            }
        }

        stage("LNE install part") {
            echo """
            IS_VERSION      = ${IS_VERSION}
            DS_VERSION      = ${DS_VERSION}
            DS_MGMT_VERSION = ${DS_MGMT_VERSION}
            """
            switch (LNE_INSTALL_TYPE) {
            case "skip" :
                echo "skip LNE installation part"
                break
            case "install" :
                echo "external LNE installation part"

                build job: 'tools-tst-bin-deploy-local-env',
                      parameters:  [
                          string(name: 'NEP_BRANCH', value: "${NEP_BRANCH}"),
                          string(name: 'HOST_IP', value: "${HOST_IP}" ),
                          booleanParam(name: 'RESTORE_SNAPSHOT', value: true ),
                          string(name: 'ESX_IP', value: "${ESX_IP}"),
                          string(name: 'VM_NAME', value: "${VM_NAME}")
                      ]

                break

            case "upgrade" :
                echo "upgrade LNE"
                break;
            }
        }

        stage('Run LNE side tests') {
            if ( SKIP_TESTS_LNE.contains('true')) {
                echo "DEBUG: skip stage Run LNE side tests"
                return
            }

            cmdstr = '''
#!/bin/bash

FCAB=/work/services/stub-srv/var/file_cabinet
CID=14159
REQ=`echo '{"customerId":14159,"configuration":{"centcom_meta":{"schema_version":"1.1.1"},"global_conf":{"log_level":"debug","conf_version":3},"agent":{"ds_host":"endpoint-protection-services.local.tw-test.net","ds_port":443,"ds_protocol":"https","check_update_period":62,"report_period":60,"ds_max_off_period":48,"modules":[{"name":"Windows Log Monitor","binary_name":"WLM.dll","enabled":true},{"name":"Log File Monitor","binary_name":"LFM.dll","enabled":true}],"transport":{"transport_type":2,"syslog":{"port":0},"scp":{"host":"siem-ingress.trustwave.com","dest_folder":"/var/siem/data/nep","port":9022,"user":"twsiem","ack":false,"max_send_folder_size":100}}},"wlm":{"max_monitor_queue_size":10000,"queues_collector_idle_time":5,"monitor_items":[{"log_name":"Security","enabled":true,"advanced_filter":false,"filters":[]},{"log_name":"System","enabled":true,"advanced_filter":false,"filters":[]}]},"lfm":{"max_monitor_queue_size":10000,"queues_collector_idle_time":5,"monitor_items":[]}}}' | sed "s/\\\\$CID/$CID/"` ; \\rm -rf $FCAB/$CID/ ; curl -v -H "Content-Type: application/json" http://localhost:9091/nep-centcom-client/initCustomerSettings -d "$REQ" && sleep 120 && curl -s http://localhost:9080/$CID/`find $FCAB/$CID/ -type f -name \\*.exe\\* -printf %f` | head -1 | strings | grep -q DOS\\ mode && curl -s http://localhost:9080/$CID/`find $FCAB/$CID/ -type f -name \\*.lnx_\\* -printf %f` | head -c 4 | grep -q ELF && echo nep_sanity_has_passed # exit -1
'''
            writeFile file: 'lne_san.sh', text: cmdstr

            def remote = [:]
            remote.name = 'test'
            remote.host = "${HOST_IP}"
            remote.user = "root"
            remote.password = "trustwave"
            remote.allowAnyHosts = true

            output = sshScript remote: remote, script: 'lne_san.sh'

             if ( output.contains('nep_sanity_has_passed')) {
                 echo "LNE sanity OK"
             }
             else {
                 echo "ERROR: LNE sanity FAILED"
                 currentBuild.result = "FAILURE"
                 throw new Exception("ERROR: LNE sanity FAILED")
             }
        }

        stage('Run Win tests') {
            node( WIN_NODE ) {
                try {
                    if ( SKIP_TESTS_WIN.contains('true') ) {
                        echo "DEBUG: skip stage Windows side tests"
                        return
                    }

                    SOURCES_REPOSITORY = 'https://bitbucket.trustwave.com/scm/nep/nep-qa.git'
                    DISPLAY_VERSION = "${BUILD_NUMBER}-${NEP_BRANCH}"
                    MODULE_ARTIFACT_SRC="https://nexus01.trustwave.com/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nep-qa&a=nep-qa-automation&e=jar&c=jar-with-dependencies&v=LATEST"
                    MODULE_ARTIFACT_DST="${WORKSPACE}\\nep-qa-automation\\nep-qa-automation.jar"
                    echo "RUN Windows smoke TESTS  ${MODULE_ARTIFACT_DST}"
                    echo "1. checkout qa-tests automation folder"
                    deleteDir()
                    git branch: "${NEP_BRANCH}", credentialsId: 'svc_wafbuild', url: "${SOURCES_REPOSITORY}"

                    echo "2. download latest nep-qa-automation.jar from nexus"
                    powershell """
                    # Get-ChildItem env:

                    echo "From: ${MODULE_ARTIFACT_SRC}"
                    echo "To: 	${MODULE_ARTIFACT_DST}"

                    ##### Download artifact from Nexus
                    echo "curl -o ${MODULE_ARTIFACT_DST} ${MODULE_ARTIFACT_SRC}"
                    curl -o "${MODULE_ARTIFACT_DST}" "$MODULE_ARTIFACT_SRC"

                    if ( -Not (Test-Path "${MODULE_ARTIFACT_DST}")) {
                        Write-host "${MODULE_ARTIFACT_DST} file can't be downloaded"
                        exit 1
                    }
                    """
                    SETTINGS_XML = "LNE/WinInstall.xml"
                    timeout(time: 20, unit: 'MINUTES') {
                            //    retry(2) {
                        bat """
                        java -jar "${MODULE_ARTIFACT_DST}" "${SETTINGS_XML}" "${HOST_IP}"
                        """
                        //    }
                    }
                    //art_str = '**/*.html'
                    archiveArtifacts artifacts: "**/emailable-report.html" // ${art_str}
                }
                catch (exc) {
	            	currentBuild.result = "FAILURE"
                    throw exc
                }
                finally {
                    echo "WIN tests "
                }
            }
        }
    }
    catch (exc) {
        currentBuild.result = "FAILURE"
        // sendEmail("Failed")
        throw exc
    }
    finally {
        // sendEmail("Smoke run OK")
                            // env.ForEmailPlugin = env.WORKSPACE
                    // emailext attachmentsPattern: 'TestResults\\*.trx',
        emailext (
            attachLog: true,
            // attachmentsPattern: "**\\emailable-report.html",
            body: """
              Smoke test results for ${NEP_BRANCH}

              ${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}

              More info at: ${env.BUILD_URL} and in attach.

            """,
            from: 'ivalevich@trustwave.com',
            to: "${SMOKE_EMAIL_LIST}",
            subject: "Smoke test results for ${NEP_BRANCH}."
        )
    }
}

def getProdVersionFromFile( versionFile ) {
    verString = sh (
    script: """
    ver_tmp=`cat ${versionFile}`
    ver_tmp=\"<\${ver_tmp%%</a>*}\"
    ver_tmp=\"\${ver_tmp##*>}\"
    echo \$ver_tmp
    """,
    returnStdout: true).trim()

    return verString
}

def sendEmail( bodyMsg ) {
	mail (
		to: "ivalevich@trustwave.com",
		subject: "Build $BUILD_NUMBER -($JOB_NAME)",
		//// body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
        body: "Mail: " + bodyMsg + " +n\n Check console output at: $BUILD_URL/console" + "\n")
}

def print_params() {
    echo """
    Params passed:
    LNE_INSTALL_TYPE :  ${LNE_INSTALL_TYPE}
    NEP_BRANCH       :  ${NEP_BRANCH}
    SMOKE_EMAIL_LIST :  ${SMOKE_EMAIL_LIST}
    SKIP_TESTS_LNE   :  ${SKIP_TESTS_LNE}
    SKIP_TESTS_WIN   :  ${SKIP_TESTS_WIN}
    """
}
