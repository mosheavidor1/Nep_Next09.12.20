import java.time.LocalDateTime

SOURCES_REPOSITORY = 'https://bitbucket.trustwave.com/scm/nep/nep-qa.git'
DISPLAY_VERSION =  "${BUILD_NUMBER}-${env.NEP_BRANCH}"


PROPERTIES_FILE_PATH="/var/jenkins_home/workspace/saved-params-${env.NEP_BRANCH}"


NEXUS_PROXY = "10.85.26.45"

ENV_NODE_MAP = [ "inc"       : "nep-qa-nightly-27-223",
                 "Portal QA" : "nep-qa-nightly-25-229" ]


ENV_XML_MAP  = [ "inc"        : "SmokeIntC.xml",
                  "Portal QA" : "SmokePortalQA.xml" ]

ENV_PARAM_MAP =  [ "inc"       : "inc",
                   "Portal QA" : "qa" ]

NODE_TO_RUN    = ENV_NODE_MAP.get(ENV_NAME)
XML_PARAM      = ENV_XML_MAP.get(ENV_NAME) 
JAR_ENV_PARAM  = ENV_PARAM_MAP.get(ENV_NAME)

echo """
     ENV_NAME                  : ${ENV_NAME}
     NODE_TO_RUN               : ${NODE_TO_RUN}
     XML_PARAM                 : ${XML_PARAM}
     JAR_ENV_PARAM             : ${JAR_ENV_PARAM}
"""

currentBuild.displayName = "#${BUILD_NUMBER}-${JAR_ENV_PARAM}"

node(NODE_TO_RUN) {

    MODULE_ARTIFACT_SRC = ""
    MODULE_ARTIFACT_DST = "${WORKSPACE}/nep-qa-automation/nep-qa-automation.jar"

    try {

        node('master') {
            stage("Read version on Master node") {
                def params = readProperties file: "${PROPERTIES_FILE_PATH}"
                NEP_QA_AUTOMATION_VERSION = params['qaautomation_version']

                echo """
                    PROPERTIES_FILE_PATH      : ${PROPERTIES_FILE_PATH}
                    NEP_QA_AUTOMATION_VERSION : ${NEP_QA_AUTOMATION_VERSION}
                """
                env.currentTime = LocalDateTime.now()

                MODULE_ARTIFACT_SRC = "http://${NEXUS_PROXY}/content/repositories/releases/com/trustwave/nep/nep-qa/nep-qa-automation/${NEP_QA_AUTOMATION_VERSION}/nep-qa-automation-${NEP_QA_AUTOMATION_VERSION}-jar-with-dependencies.jar"
                // MODULE_ARTIFACT_SRC = "http://${NEXUS_PROXY}/service/local/artifact/maven/redirect?r=public&g=com.trustwave.nep.nep-qa&a=nep-qa-automation&e=jar&c=jar-with-dependencies&v=LATEST"
            }
        }

        stage('Prepare Environment') {

            // print params:
            echo """
            PROPERTIES_FILE_PATH      : ${PROPERTIES_FILE_PATH}
            NEP_QA_AUTOMATION_VERSION : ${NEP_QA_AUTOMATION_VERSION}
            NEP_BRANCH                : ${NEP_BRANCH}
            EMAIL_LIST                : ${EMAIL_LIST}
            """

            // clean Workspace
            deleteDir()

            git branch: "${env.NEP_BRANCH}", credentialsId: 'svc_wafbuild', url: "${SOURCES_REPOSITORY}"
        }

        stage('get jar from nexus') {
            sh """
            curl -v -L --retry 3 --retry-delay 10 -o "${MODULE_ARTIFACT_DST}"  "${MODULE_ARTIFACT_SRC}"
            """
        }

        stage('Run Tests and Prepare results') {
            REGR_TIMEOUT = 120
            timeout(time: REGR_TIMEOUT, unit: 'MINUTES') {
                WAIT_PARAM = WAIT_FOR_EVENTS.isEmpty() ? "" : "WaitForEvents120"

                JAVA_JAR_CMD = """
                java -jar ${MODULE_ARTIFACT_DST} ${XML_PARAM} ${JAR_ENV_PARAM} ${WAIT_PARAM} win]10.85.25.187]solo-user]breach12345 lnx]10.85.26.231]root]trustwave
                """.trim()

               echo "$JAVA_JAR_CMD"
               sh """
                    ${JAVA_JAR_CMD}
               """
            }
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
    finally {
        if (currentBuild.result == 'SUCCESS') {
            sendEMail("Success")
        }
        else {
            sendEmail("Failure")
        }
    }
}

def sendEmail(status) {
    // emailext attachmentsPattern: "test-output/*",
    emailext (
        attachLog: true,
        attachmentsPattern: "test-output/emailable-report.html, test-output/capture/*",
        body: '${SCRIPT, template="groovy-html.template"}, ${FILE,path="test-output/emailable-report.html"}',
        subject: "${env.JOB_NAME} (env:${ENV_NAME})- TEST # ${DISPLAY_VERSION} - " + status,
        mimeType: 'text/html',
        from: 'svc_wafbuild@trustwave.com',
        to: "${EMAIL_LIST}"
    )
}
